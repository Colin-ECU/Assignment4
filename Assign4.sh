#!/bin/bash

# -------------------------------------------------------------------------------------------------------------------
# INTRODUCTION
# This is version 1.0
echo
echo
echo This Script is designed to scrape Alerts generated by USA Cybersecurity and Infrastructure Security Agency CISA
echo The results can be reviewed and compared to previous years to provide a 12 year range of frequency based comparison.

# There are a number of other variations to filter and allow comparison against year to year or drill down for Alert type
# Those features and more can be added to version 2.0.
echo 

#Colours to be applied to functions
BLUE="\e[34m"
GREEN="\e[32m"
RED="\e[31m"
PURPLE="\e[35m"
NORMAL="\e[97m"

# -------------------------------------------------------------------------------------------------------------------
# SECURITY
# The user is asked to type a secret password (Password will be hidden).
echo -e ${RED} 
read -sp "Please type your secret password here:  " password
echo -e ${NORMAL}
   
#  The secret password is: twist 
    
# The user password is then checked (-c) against the SHA256 encrypted password stored in file 
# ~/scripts/portfolio/week6/Assignment4/secret.txt with output supressed.
# This sha256sum encrypted password and secret.txt file were created previously and stored in the Assignment4 folder.

echo $password | sha256sum -c --status secret.txt 

# If the exit status of the last command is OK (0) then the first echo condition applies, if not the second condition applies.
if [ "$?" -eq 0 ]; then  
    # If the user’s password is correct, print “Access Granted” and quit with the exit code 0.
    echo -e ${GREEN} "Access Granted"
    

else
    # If the user’s password is incorrect print “Access Denied” and quit with the exit code 1.
    echo -e ${RED} "Access Denied"
    exit 1
fi	

# This changes Dir to the location of the PasswordCheck folder
cd ~/scripts/portfolio/week6/Assignment4

# -----------------------------------------------------------------------------------------------------------------------------------
# US-CISA ALERT DATA REQUEST

echo The maximum US-CISA Alert Data year range to review is from 2008 to 2020.

# There are 15 options offered which include ALL and Exit.
# This provides the reference point for the script to return to once completing the option.

        echo -e ${BLUE} "2020" 
        echo -e ${BLUE} "2019" 
        echo -e ${BLUE} "2018"
        echo -e ${BLUE} "2017"
        echo -e ${BLUE} "2016"
        echo -e ${BLUE} "2015"
        echo -e ${BLUE} "2014"
        echo -e ${BLUE} "2013"
        echo -e ${BLUE} "2012"
        echo -e ${BLUE} "2011"
        echo -e ${BLUE} "2010"
        echo -e ${BLUE} "2009"
        echo -e ${BLUE} "2008"
        echo -e ${BLUE} "all"
        echo -e ${NORMAL} "exit"

        echo Please use either "all or exit" in version 1.0...Thank you.
        echo
        read -p "Now please type your selection from the list here:  " option
        # Option all provides the comparison of the entire range so is more meaningful for version 1.0.

        # The user is asked to enter an option selection from the list

    if [ $? -eq 0 ]; then
        
        # If the option selected is true then the below path will be followed and file executed
        # Each option will be directed to the relevant script file and run
        # An option other than one listed will result in and Incorrect option error
      
        Location=~/scripts/portfolio/week6/Assignment4/us-cert/ncas/alerts

        # This version will has been constructed to sample the ALL option in order to be able to 
        # visualise a trend in Alert volume over time.

        # The wget -nc has been inserted to inhibit another scrape on the US-CISA website. 
        # The files previously downloaded have been converted to a .txt file for ease of demonstration.
    

      case $option in

        2020)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2020
        ;;
        2019)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2019   
        ;;
        2018)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2018   
        ;;
        2017)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2017  
        ;;
        2016)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2016  
        ;;
        2015)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2015   
        ;;
        2014)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2014   
        ;;
        2013)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2013   
        ;;
        2012)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2012   
        ;;
        2011)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2011   
        ;;
        2010)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2010      
        ;;
        2009)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2009  
        ;;
        2008)  wget -p -nc $location https://www.us-cert.gov/ncas/alerts/2008      
        ;;
        all) wget -i cisaAll.txt 
        ;;
        exit)  exit 0
        ;;
        *)  echo "Incorrect option"
       esac
    fi

      
        #If the user selects the exit option they will be return to the command line
        # If the user selects an incorrect option number they will be returned to the 
        # Menu and receive the error "Incorrect Option".
        

# -------------------------------------------------------------------------------------------------------------------------------------
# FILTER DATA BY YEAR AND ALERT NUMBER 
        #
        # This process below conducts a filter on the US-CISA Alert data downloaded and converted to .txt files.  
        # These filters are arrayed together using a Variable (given version 1.0 is using the ALL option)
        # These files are stored by year in folder Assignment4.
        # first the files are located using Find, then the grep commend is used to search the file for Alert related
        # text which is relevant to the year.  The output from this is piped through to the awk command which compiles the output.
        # This output is then stored and subsequently accessed by the awk table below as an echo input variable which
        # pulls the output contents into the table to be formatted and presented.
        
        
            var=$(
                find -name 2008.txt | xargs grep -i -c "aa08-\|ta08" | awk '{a+=$1} END{print "2008:  " a}' 
                find -name 2009.txt | xargs grep -i -c "aa09-\|ta09" | awk '{a+=$1} END{print "2009:  " a}' 
                find -name 2010.txt | xargs grep -i -c "aa10-\|ta10" | awk '{a+=$1} END{print "2010:  " a}' 
                find -name 2011.txt | xargs grep -i -c "aa11-\|ta11" | awk '{a+=$1} END{print "2011:  " a}' 
                find -name 2012.txt | xargs grep -i -c "aa12-\|ta12" | awk '{a+=$1} END{print "2012:  " a}' 
                find -name 2013.txt | xargs grep -i -c "aa13-\|ta13" | awk '{a+=$1} END{print "2013:  " a}' 
                find -name 2014.txt | xargs grep -i -c "aa14-\|ta14" | awk '{a+=$1} END{print "2014:  " a}' 
                find -name 2015.txt | xargs grep -i -c "aa15-\|ta15" | awk '{a+=$1} END{print "2015:  " a}' 
                find -name 2016.txt | xargs grep -i -c "aa16-\|ta16" | awk '{a+=$1} END{print "2016:  " a}' 
                find -name 2017.txt | xargs grep -i -c "aa17-\|ta17" | awk '{a+=$1} END{print "2017:  " a}' 
                find -name 2018.txt | xargs grep -i -c "aa18-\|ta18" | awk '{a+=$1} END{print "2018:  " a}' 
                find -name 2019.txt | xargs grep -i -c "aa19-\|ta19" | awk '{a+=$1} END{print "2019:  " a}' 
                find -name 2020.txt | xargs grep -i -c "aa20-\|ta20" | awk '{a+=$1} END{print "2020:  " a}'
            )

#---------------------------------------------------------------------------------------------------------------------------------------
# PRESENT IN TABLE FORMAT
        
                # The below section is the presentation section where awk inputs the data and presents in a table.
                # The process BEGIN then sets the format for the contents.  In this case it is a colour formatted table.
                # The table headings are provided in the first line of print (YEAR and Number of Alerts).  The second line is formatting - providing a line border 
                # across the top of the table.
                # The next command is a filter which directs the input from the $var into a table which allows for an easy comparison of year on year US-CISA Alert volumes.
                # This table spans 12 years ranging from 2008 through to 2020.  This table can be dynamically updated over time to monitor the year frequency trend.
                # The processing command ends with END and the final print is for the bottom line border of the table.
             
            if [ $? -eq 0 ];
                then
                    echo
                    echo
                    echo "This table contains US-CISA Alerts, by year, spanning 2008 through to 2020"
                    echo
                    awk 'BEGIN { 
                    FS=":"; 
                    print "| \033[34mYear\033[0m    | \033[34mNumberofAlerts\033[0m |  "; 
                    print "|_________|________________|";
                    } 
    
                    { 
                    printf("| \033[33m%-7s\033[0m | \033[35m%-14s\033[0m |\n", $1, $2 ); 
                    } 
                    END{ 
                    print("____________________________"); 
      
                    }' <<< $(echo "$var")
                    echo
                    echo # The top and bottom echo lines are purely to provide space on the output page so that the table can be presented better.
            
            fi 
        

# ------------------------------------------------------------------------------------------------------------------------------------
# END

